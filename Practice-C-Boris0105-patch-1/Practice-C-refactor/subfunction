#include <stdio.h>

void* SENSOR_Threshold(void*device_map_system_fanzone)

{

	device_map_system_fanzone* SENSOR_INFO;
	SENSOR_INFO= (device_map_system_fanzone*)device_map_system_fanzone;
	
	int FANZONE = device_map_system_fanzone -> PWM_Output;
	PWM_Output = PWM_Output + 1;
	
	printf("%PWM_Output: %d\n",PWM_Output);
	
	Tnon_critical_PWM-> PWM_Output =PWM_Output;

}


void* CRITICAL(void*SENSOR_DATA)
{

	PWM_Calculated_from_SC* Tnon_critical_PWM;
	Tnon_critical_PWM= (PWM_Calculated_from_SC*)PWM;
	
	int PWM = PWM -> PWM_Output;
	PWM_Output = 100;
	
	printf("%PWM_Output: %d\n",PWM_Output);
	
	Tnon_critical_PWM-> PWM_Output =PWM_Output;

}




int pwoer_ratio_HP_scale(int FANZONE_ID)
{
	float power_scale =get_CPU_Power_Ratio()
	for (int i = 1; i < 8; i++) {
		if (power_scale<= currentConfig->fanzones[FANZONE_ID].HP_fan_zone_settings[i][0])
			return i;
	}
}




int pwoer_ratio_STD_scale(int FANZONE_ID)
{
	float power_scale =get_CPU_Power_Ratio()
	for (int i = 1; i < 8; i++) {
		if (power_scale<= currentConfig->fanzones[FANZONE_ID].STD_fan_zone_settings[i][0])
			return i;
	}
}




int amb_STD_scale(int ambTemp,int FANZONE_ID)
{
	for (int i = 1; i < 8; i++) {
		if (ambTemp <= currentConfig->fanzones[FANZONE_ID].STD_fan_zone_settings[0][i])
			return i;
	}
}



int amb_HP_scale(int ambTemp,int FANZONE_ID)
{
	for (int i = 1; i < 8; i++) {
		if (ambTemp <= currentConfig->fanzones[FANZONE_ID].HP_fan_zone_settings[0][i])
			return i;
	}
}



int get_sensorValue(int entity)
	{
		for (i=0; i<37;i++) 
		{ 
		if (device_map_system_fanzone[i].type==entity)
	    return device_map_system_fanzone[i].TEMP;
	
		}
	
	
	}



	
	
	
float get_CPU_Power_Ratio()
{

int CPU_TDP;

if (device_map_system_fanzone[i].type==ENTITY_PROCESSOR_high_Power)
		CPU_TDP=250;
else if (device_map_system_fanzone[i].type==ENTITY_PROCESSOR)
		CPU_TDP=165;
else if (device_map_system_fanzone[i].type==ENTITY_PROCESSOR_low_Power)
		CPU_TDP=125;

	int PWR=get_sensorValue(ENTITY_CPU_POWER);
	

	return (float)PWR/CPU_TDP;

}	



void* openloop()

{
	
	
		
	int AMB = get_sensorValue(ENTITY_Ambient_Sensor);
	int PRW = get_CPU_Power_Ratio();
	

	
	if(currentConfig->entity.fan_type.type== ENTITY_FAN_TYPE_STD)
	
	{
		
		
		for (i=0; i<FAN_ZONE_NUM; i++)
		{
			int AMB_scale =amb_STD_scale(AMB,i);
			int POWER_ratio=pwoer_ratio_STD_scale(i);
			
			FANMAP_output[i].openloop= currentConfig->fanzones[0].STD_fan_zone_settings[POWER_ratio][AMB_scale];
		}
	}
	
	
	if(currentConfig->entity.fan_type.type== ENTITY_FAN_TYPE_PERFORMANCE )
	
	{
		
		
		for (i=0; i<FAN_ZONE_NUM; i++)
		{
			int AMB_scale =amb_HP_scale(AMB,i);
			int POWER_ratio=pwoer_ratio_HP_scale(i);
			
			FAN_MAP[i].openloop= currentConfig->fanzones[0].HP_fan_zone_settings[POWER_ratio][AMB_scale];
		}
	}
	

}



void*funcFanMap(void*FAN_MAP)

{

	FAN_ZONE_MAP* FANMAP_output;
	FANMAP_output= (FAN_ZONE_MAP*)FAN_MAP;
	
	
	//=======================
	int max(float x, float y)
	{
    if( x > y )return x ;
    return y ;
	}

	
	FANMAP_output[0] = max(FANMAP_output[0].openloop, 0);
	FANMAP_output[0] = max(FANMAP_output[0], float FANMAP_output[0].SENSOR_Threshold);
	
	FANMAP_output[1] = max(float FANMAP_output[1].openloop, float FANMAP_output[1].CPU_PID);
	FANMAP_output[1] = max(float FANMAP_output[1], float FANMAP_output[1].SENSOR_Threshold);
	
	FANMAP_output[2] = max(float FANMAP_output[2].openloop, float FANMAP_output[2].CPU_PID);
	FANMAP_output[2] = max(float FANMAP_output[2], float FANMAP_output[2].SENSOR_Threshold);
	
	FANMAP_output[3] = max(float FANMAP_output[3].openloop, float FANMAP_output[3].CPU_PID);
	FANMAP_output[3] = max(float FANMAP_output[3], float FANMAP_output[3].SENSOR_Threshold);
		
	
}






